// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"im-chat/dao/model"
)

func newExamRecords(db *gorm.DB, opts ...gen.DOOption) examRecords {
	_examRecords := examRecords{}

	_examRecords.examRecordsDo.UseDB(db, opts...)
	_examRecords.examRecordsDo.UseModel(&model.ExamRecords{})

	tableName := _examRecords.examRecordsDo.TableName()
	_examRecords.ALL = field.NewAsterisk(tableName)
	_examRecords.ID = field.NewInt(tableName, "id")
	_examRecords.UserID = field.NewInt(tableName, "user_id")
	_examRecords.PositionID = field.NewInt(tableName, "position_id")
	_examRecords.Score = field.NewInt(tableName, "score")
	_examRecords.Remark = field.NewString(tableName, "remark")
	_examRecords.CreatedAt = field.NewTime(tableName, "created_at")
	_examRecords.IsDeleted = field.NewInt(tableName, "is_deleted")

	_examRecords.fillFieldMap()

	return _examRecords
}

type examRecords struct {
	examRecordsDo

	ALL        field.Asterisk
	ID         field.Int    // 考试记录ID
	UserID     field.Int    // 用户ID
	PositionID field.Int    // 岗位id
	Score      field.Int    // 总得分
	Remark     field.String // 考试评语
	CreatedAt  field.Time   // 提交时间
	IsDeleted  field.Int    // 逻辑删除标记（0=未删除，1=已删除）

	fieldMap map[string]field.Expr
}

func (e examRecords) Table(newTableName string) *examRecords {
	e.examRecordsDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e examRecords) As(alias string) *examRecords {
	e.examRecordsDo.DO = *(e.examRecordsDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *examRecords) updateTableName(table string) *examRecords {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt(table, "id")
	e.UserID = field.NewInt(table, "user_id")
	e.PositionID = field.NewInt(table, "position_id")
	e.Score = field.NewInt(table, "score")
	e.Remark = field.NewString(table, "remark")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.IsDeleted = field.NewInt(table, "is_deleted")

	e.fillFieldMap()

	return e
}

func (e *examRecords) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *examRecords) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 7)
	e.fieldMap["id"] = e.ID
	e.fieldMap["user_id"] = e.UserID
	e.fieldMap["position_id"] = e.PositionID
	e.fieldMap["score"] = e.Score
	e.fieldMap["remark"] = e.Remark
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["is_deleted"] = e.IsDeleted
}

func (e examRecords) clone(db *gorm.DB) examRecords {
	e.examRecordsDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e examRecords) replaceDB(db *gorm.DB) examRecords {
	e.examRecordsDo.ReplaceDB(db)
	return e
}

type examRecordsDo struct{ gen.DO }

type IExamRecordsDo interface {
	gen.SubQuery
	Debug() IExamRecordsDo
	WithContext(ctx context.Context) IExamRecordsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IExamRecordsDo
	WriteDB() IExamRecordsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IExamRecordsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IExamRecordsDo
	Not(conds ...gen.Condition) IExamRecordsDo
	Or(conds ...gen.Condition) IExamRecordsDo
	Select(conds ...field.Expr) IExamRecordsDo
	Where(conds ...gen.Condition) IExamRecordsDo
	Order(conds ...field.Expr) IExamRecordsDo
	Distinct(cols ...field.Expr) IExamRecordsDo
	Omit(cols ...field.Expr) IExamRecordsDo
	Join(table schema.Tabler, on ...field.Expr) IExamRecordsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IExamRecordsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IExamRecordsDo
	Group(cols ...field.Expr) IExamRecordsDo
	Having(conds ...gen.Condition) IExamRecordsDo
	Limit(limit int) IExamRecordsDo
	Offset(offset int) IExamRecordsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IExamRecordsDo
	Unscoped() IExamRecordsDo
	Create(values ...*model.ExamRecords) error
	CreateInBatches(values []*model.ExamRecords, batchSize int) error
	Save(values ...*model.ExamRecords) error
	First() (*model.ExamRecords, error)
	Take() (*model.ExamRecords, error)
	Last() (*model.ExamRecords, error)
	Find() ([]*model.ExamRecords, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExamRecords, err error)
	FindInBatches(result *[]*model.ExamRecords, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ExamRecords) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IExamRecordsDo
	Assign(attrs ...field.AssignExpr) IExamRecordsDo
	Joins(fields ...field.RelationField) IExamRecordsDo
	Preload(fields ...field.RelationField) IExamRecordsDo
	FirstOrInit() (*model.ExamRecords, error)
	FirstOrCreate() (*model.ExamRecords, error)
	FindByPage(offset int, limit int) (result []*model.ExamRecords, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IExamRecordsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e examRecordsDo) Debug() IExamRecordsDo {
	return e.withDO(e.DO.Debug())
}

func (e examRecordsDo) WithContext(ctx context.Context) IExamRecordsDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e examRecordsDo) ReadDB() IExamRecordsDo {
	return e.Clauses(dbresolver.Read)
}

func (e examRecordsDo) WriteDB() IExamRecordsDo {
	return e.Clauses(dbresolver.Write)
}

func (e examRecordsDo) Session(config *gorm.Session) IExamRecordsDo {
	return e.withDO(e.DO.Session(config))
}

func (e examRecordsDo) Clauses(conds ...clause.Expression) IExamRecordsDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e examRecordsDo) Returning(value interface{}, columns ...string) IExamRecordsDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e examRecordsDo) Not(conds ...gen.Condition) IExamRecordsDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e examRecordsDo) Or(conds ...gen.Condition) IExamRecordsDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e examRecordsDo) Select(conds ...field.Expr) IExamRecordsDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e examRecordsDo) Where(conds ...gen.Condition) IExamRecordsDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e examRecordsDo) Order(conds ...field.Expr) IExamRecordsDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e examRecordsDo) Distinct(cols ...field.Expr) IExamRecordsDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e examRecordsDo) Omit(cols ...field.Expr) IExamRecordsDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e examRecordsDo) Join(table schema.Tabler, on ...field.Expr) IExamRecordsDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e examRecordsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IExamRecordsDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e examRecordsDo) RightJoin(table schema.Tabler, on ...field.Expr) IExamRecordsDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e examRecordsDo) Group(cols ...field.Expr) IExamRecordsDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e examRecordsDo) Having(conds ...gen.Condition) IExamRecordsDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e examRecordsDo) Limit(limit int) IExamRecordsDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e examRecordsDo) Offset(offset int) IExamRecordsDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e examRecordsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IExamRecordsDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e examRecordsDo) Unscoped() IExamRecordsDo {
	return e.withDO(e.DO.Unscoped())
}

func (e examRecordsDo) Create(values ...*model.ExamRecords) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e examRecordsDo) CreateInBatches(values []*model.ExamRecords, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e examRecordsDo) Save(values ...*model.ExamRecords) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e examRecordsDo) First() (*model.ExamRecords, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExamRecords), nil
	}
}

func (e examRecordsDo) Take() (*model.ExamRecords, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExamRecords), nil
	}
}

func (e examRecordsDo) Last() (*model.ExamRecords, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExamRecords), nil
	}
}

func (e examRecordsDo) Find() ([]*model.ExamRecords, error) {
	result, err := e.DO.Find()
	return result.([]*model.ExamRecords), err
}

func (e examRecordsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExamRecords, err error) {
	buf := make([]*model.ExamRecords, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e examRecordsDo) FindInBatches(result *[]*model.ExamRecords, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e examRecordsDo) Attrs(attrs ...field.AssignExpr) IExamRecordsDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e examRecordsDo) Assign(attrs ...field.AssignExpr) IExamRecordsDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e examRecordsDo) Joins(fields ...field.RelationField) IExamRecordsDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e examRecordsDo) Preload(fields ...field.RelationField) IExamRecordsDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e examRecordsDo) FirstOrInit() (*model.ExamRecords, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExamRecords), nil
	}
}

func (e examRecordsDo) FirstOrCreate() (*model.ExamRecords, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExamRecords), nil
	}
}

func (e examRecordsDo) FindByPage(offset int, limit int) (result []*model.ExamRecords, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e examRecordsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e examRecordsDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e examRecordsDo) Delete(models ...*model.ExamRecords) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *examRecordsDo) withDO(do gen.Dao) *examRecordsDo {
	e.DO = *do.(*gen.DO)
	return e
}
