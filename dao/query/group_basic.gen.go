// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"im-chat/dao/model"
)

func newGroupBasic(db *gorm.DB, opts ...gen.DOOption) groupBasic {
	_groupBasic := groupBasic{}

	_groupBasic.groupBasicDo.UseDB(db, opts...)
	_groupBasic.groupBasicDo.UseModel(&model.GroupBasic{})

	tableName := _groupBasic.groupBasicDo.TableName()
	_groupBasic.ALL = field.NewAsterisk(tableName)
	_groupBasic.ID = field.NewInt32(tableName, "id")
	_groupBasic.Name = field.NewString(tableName, "name")
	_groupBasic.OwnerID = field.NewInt32(tableName, "owner_id")
	_groupBasic.Icon = field.NewString(tableName, "icon")
	_groupBasic.Type = field.NewInt32(tableName, "type")
	_groupBasic.Description = field.NewString(tableName, "description")
	_groupBasic.CreatedAt = field.NewTime(tableName, "created_at")
	_groupBasic.UpdatedAt = field.NewTime(tableName, "updated_at")
	_groupBasic.DeletedAt = field.NewField(tableName, "deleted_at")

	_groupBasic.fillFieldMap()

	return _groupBasic
}

type groupBasic struct {
	groupBasicDo

	ALL         field.Asterisk
	ID          field.Int32
	Name        field.String
	OwnerID     field.Int32
	Icon        field.String
	Type        field.Int32
	Description field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field

	fieldMap map[string]field.Expr
}

func (g groupBasic) Table(newTableName string) *groupBasic {
	g.groupBasicDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g groupBasic) As(alias string) *groupBasic {
	g.groupBasicDo.DO = *(g.groupBasicDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *groupBasic) updateTableName(table string) *groupBasic {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt32(table, "id")
	g.Name = field.NewString(table, "name")
	g.OwnerID = field.NewInt32(table, "owner_id")
	g.Icon = field.NewString(table, "icon")
	g.Type = field.NewInt32(table, "type")
	g.Description = field.NewString(table, "description")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.DeletedAt = field.NewField(table, "deleted_at")

	g.fillFieldMap()

	return g
}

func (g *groupBasic) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *groupBasic) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 9)
	g.fieldMap["id"] = g.ID
	g.fieldMap["name"] = g.Name
	g.fieldMap["owner_id"] = g.OwnerID
	g.fieldMap["icon"] = g.Icon
	g.fieldMap["type"] = g.Type
	g.fieldMap["description"] = g.Description
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["deleted_at"] = g.DeletedAt
}

func (g groupBasic) clone(db *gorm.DB) groupBasic {
	g.groupBasicDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g groupBasic) replaceDB(db *gorm.DB) groupBasic {
	g.groupBasicDo.ReplaceDB(db)
	return g
}

type groupBasicDo struct{ gen.DO }

type IGroupBasicDo interface {
	gen.SubQuery
	Debug() IGroupBasicDo
	WithContext(ctx context.Context) IGroupBasicDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGroupBasicDo
	WriteDB() IGroupBasicDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGroupBasicDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGroupBasicDo
	Not(conds ...gen.Condition) IGroupBasicDo
	Or(conds ...gen.Condition) IGroupBasicDo
	Select(conds ...field.Expr) IGroupBasicDo
	Where(conds ...gen.Condition) IGroupBasicDo
	Order(conds ...field.Expr) IGroupBasicDo
	Distinct(cols ...field.Expr) IGroupBasicDo
	Omit(cols ...field.Expr) IGroupBasicDo
	Join(table schema.Tabler, on ...field.Expr) IGroupBasicDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGroupBasicDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGroupBasicDo
	Group(cols ...field.Expr) IGroupBasicDo
	Having(conds ...gen.Condition) IGroupBasicDo
	Limit(limit int) IGroupBasicDo
	Offset(offset int) IGroupBasicDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGroupBasicDo
	Unscoped() IGroupBasicDo
	Create(values ...*model.GroupBasic) error
	CreateInBatches(values []*model.GroupBasic, batchSize int) error
	Save(values ...*model.GroupBasic) error
	First() (*model.GroupBasic, error)
	Take() (*model.GroupBasic, error)
	Last() (*model.GroupBasic, error)
	Find() ([]*model.GroupBasic, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GroupBasic, err error)
	FindInBatches(result *[]*model.GroupBasic, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GroupBasic) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGroupBasicDo
	Assign(attrs ...field.AssignExpr) IGroupBasicDo
	Joins(fields ...field.RelationField) IGroupBasicDo
	Preload(fields ...field.RelationField) IGroupBasicDo
	FirstOrInit() (*model.GroupBasic, error)
	FirstOrCreate() (*model.GroupBasic, error)
	FindByPage(offset int, limit int) (result []*model.GroupBasic, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGroupBasicDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g groupBasicDo) Debug() IGroupBasicDo {
	return g.withDO(g.DO.Debug())
}

func (g groupBasicDo) WithContext(ctx context.Context) IGroupBasicDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g groupBasicDo) ReadDB() IGroupBasicDo {
	return g.Clauses(dbresolver.Read)
}

func (g groupBasicDo) WriteDB() IGroupBasicDo {
	return g.Clauses(dbresolver.Write)
}

func (g groupBasicDo) Session(config *gorm.Session) IGroupBasicDo {
	return g.withDO(g.DO.Session(config))
}

func (g groupBasicDo) Clauses(conds ...clause.Expression) IGroupBasicDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g groupBasicDo) Returning(value interface{}, columns ...string) IGroupBasicDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g groupBasicDo) Not(conds ...gen.Condition) IGroupBasicDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g groupBasicDo) Or(conds ...gen.Condition) IGroupBasicDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g groupBasicDo) Select(conds ...field.Expr) IGroupBasicDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g groupBasicDo) Where(conds ...gen.Condition) IGroupBasicDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g groupBasicDo) Order(conds ...field.Expr) IGroupBasicDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g groupBasicDo) Distinct(cols ...field.Expr) IGroupBasicDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g groupBasicDo) Omit(cols ...field.Expr) IGroupBasicDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g groupBasicDo) Join(table schema.Tabler, on ...field.Expr) IGroupBasicDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g groupBasicDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGroupBasicDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g groupBasicDo) RightJoin(table schema.Tabler, on ...field.Expr) IGroupBasicDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g groupBasicDo) Group(cols ...field.Expr) IGroupBasicDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g groupBasicDo) Having(conds ...gen.Condition) IGroupBasicDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g groupBasicDo) Limit(limit int) IGroupBasicDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g groupBasicDo) Offset(offset int) IGroupBasicDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g groupBasicDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGroupBasicDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g groupBasicDo) Unscoped() IGroupBasicDo {
	return g.withDO(g.DO.Unscoped())
}

func (g groupBasicDo) Create(values ...*model.GroupBasic) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g groupBasicDo) CreateInBatches(values []*model.GroupBasic, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g groupBasicDo) Save(values ...*model.GroupBasic) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g groupBasicDo) First() (*model.GroupBasic, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupBasic), nil
	}
}

func (g groupBasicDo) Take() (*model.GroupBasic, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupBasic), nil
	}
}

func (g groupBasicDo) Last() (*model.GroupBasic, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupBasic), nil
	}
}

func (g groupBasicDo) Find() ([]*model.GroupBasic, error) {
	result, err := g.DO.Find()
	return result.([]*model.GroupBasic), err
}

func (g groupBasicDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GroupBasic, err error) {
	buf := make([]*model.GroupBasic, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g groupBasicDo) FindInBatches(result *[]*model.GroupBasic, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g groupBasicDo) Attrs(attrs ...field.AssignExpr) IGroupBasicDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g groupBasicDo) Assign(attrs ...field.AssignExpr) IGroupBasicDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g groupBasicDo) Joins(fields ...field.RelationField) IGroupBasicDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g groupBasicDo) Preload(fields ...field.RelationField) IGroupBasicDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g groupBasicDo) FirstOrInit() (*model.GroupBasic, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupBasic), nil
	}
}

func (g groupBasicDo) FirstOrCreate() (*model.GroupBasic, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupBasic), nil
	}
}

func (g groupBasicDo) FindByPage(offset int, limit int) (result []*model.GroupBasic, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g groupBasicDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g groupBasicDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g groupBasicDo) Delete(models ...*model.GroupBasic) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *groupBasicDo) withDO(do gen.Dao) *groupBasicDo {
	g.DO = *do.(*gen.DO)
	return g
}
