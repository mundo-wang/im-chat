// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"im-chat/dao/model"
)

func newAnswerRecords(db *gorm.DB, opts ...gen.DOOption) answerRecords {
	_answerRecords := answerRecords{}

	_answerRecords.answerRecordsDo.UseDB(db, opts...)
	_answerRecords.answerRecordsDo.UseModel(&model.AnswerRecords{})

	tableName := _answerRecords.answerRecordsDo.TableName()
	_answerRecords.ALL = field.NewAsterisk(tableName)
	_answerRecords.ID = field.NewInt(tableName, "id")
	_answerRecords.ExamID = field.NewInt(tableName, "exam_id")
	_answerRecords.QuestionNo = field.NewInt(tableName, "question_no")
	_answerRecords.QuestionID = field.NewInt(tableName, "question_id")
	_answerRecords.UserAnswer = field.NewString(tableName, "user_answer")
	_answerRecords.CorrectAnswer = field.NewString(tableName, "correct_answer")
	_answerRecords.IsCorrect = field.NewInt(tableName, "is_correct")

	_answerRecords.fillFieldMap()

	return _answerRecords
}

type answerRecords struct {
	answerRecordsDo

	ALL           field.Asterisk
	ID            field.Int    // 答题记录ID
	ExamID        field.Int    // 考试ID
	QuestionNo    field.Int    // 题目编号
	QuestionID    field.Int    // 题目ID
	UserAnswer    field.String // 用户答案
	CorrectAnswer field.String // 正确答案
	IsCorrect     field.Int    // 是否答对

	fieldMap map[string]field.Expr
}

func (a answerRecords) Table(newTableName string) *answerRecords {
	a.answerRecordsDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a answerRecords) As(alias string) *answerRecords {
	a.answerRecordsDo.DO = *(a.answerRecordsDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *answerRecords) updateTableName(table string) *answerRecords {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt(table, "id")
	a.ExamID = field.NewInt(table, "exam_id")
	a.QuestionNo = field.NewInt(table, "question_no")
	a.QuestionID = field.NewInt(table, "question_id")
	a.UserAnswer = field.NewString(table, "user_answer")
	a.CorrectAnswer = field.NewString(table, "correct_answer")
	a.IsCorrect = field.NewInt(table, "is_correct")

	a.fillFieldMap()

	return a
}

func (a *answerRecords) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *answerRecords) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["exam_id"] = a.ExamID
	a.fieldMap["question_no"] = a.QuestionNo
	a.fieldMap["question_id"] = a.QuestionID
	a.fieldMap["user_answer"] = a.UserAnswer
	a.fieldMap["correct_answer"] = a.CorrectAnswer
	a.fieldMap["is_correct"] = a.IsCorrect
}

func (a answerRecords) clone(db *gorm.DB) answerRecords {
	a.answerRecordsDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a answerRecords) replaceDB(db *gorm.DB) answerRecords {
	a.answerRecordsDo.ReplaceDB(db)
	return a
}

type answerRecordsDo struct{ gen.DO }

type IAnswerRecordsDo interface {
	gen.SubQuery
	Debug() IAnswerRecordsDo
	WithContext(ctx context.Context) IAnswerRecordsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAnswerRecordsDo
	WriteDB() IAnswerRecordsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAnswerRecordsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAnswerRecordsDo
	Not(conds ...gen.Condition) IAnswerRecordsDo
	Or(conds ...gen.Condition) IAnswerRecordsDo
	Select(conds ...field.Expr) IAnswerRecordsDo
	Where(conds ...gen.Condition) IAnswerRecordsDo
	Order(conds ...field.Expr) IAnswerRecordsDo
	Distinct(cols ...field.Expr) IAnswerRecordsDo
	Omit(cols ...field.Expr) IAnswerRecordsDo
	Join(table schema.Tabler, on ...field.Expr) IAnswerRecordsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAnswerRecordsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAnswerRecordsDo
	Group(cols ...field.Expr) IAnswerRecordsDo
	Having(conds ...gen.Condition) IAnswerRecordsDo
	Limit(limit int) IAnswerRecordsDo
	Offset(offset int) IAnswerRecordsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAnswerRecordsDo
	Unscoped() IAnswerRecordsDo
	Create(values ...*model.AnswerRecords) error
	CreateInBatches(values []*model.AnswerRecords, batchSize int) error
	Save(values ...*model.AnswerRecords) error
	First() (*model.AnswerRecords, error)
	Take() (*model.AnswerRecords, error)
	Last() (*model.AnswerRecords, error)
	Find() ([]*model.AnswerRecords, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AnswerRecords, err error)
	FindInBatches(result *[]*model.AnswerRecords, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AnswerRecords) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAnswerRecordsDo
	Assign(attrs ...field.AssignExpr) IAnswerRecordsDo
	Joins(fields ...field.RelationField) IAnswerRecordsDo
	Preload(fields ...field.RelationField) IAnswerRecordsDo
	FirstOrInit() (*model.AnswerRecords, error)
	FirstOrCreate() (*model.AnswerRecords, error)
	FindByPage(offset int, limit int) (result []*model.AnswerRecords, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAnswerRecordsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a answerRecordsDo) Debug() IAnswerRecordsDo {
	return a.withDO(a.DO.Debug())
}

func (a answerRecordsDo) WithContext(ctx context.Context) IAnswerRecordsDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a answerRecordsDo) ReadDB() IAnswerRecordsDo {
	return a.Clauses(dbresolver.Read)
}

func (a answerRecordsDo) WriteDB() IAnswerRecordsDo {
	return a.Clauses(dbresolver.Write)
}

func (a answerRecordsDo) Session(config *gorm.Session) IAnswerRecordsDo {
	return a.withDO(a.DO.Session(config))
}

func (a answerRecordsDo) Clauses(conds ...clause.Expression) IAnswerRecordsDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a answerRecordsDo) Returning(value interface{}, columns ...string) IAnswerRecordsDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a answerRecordsDo) Not(conds ...gen.Condition) IAnswerRecordsDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a answerRecordsDo) Or(conds ...gen.Condition) IAnswerRecordsDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a answerRecordsDo) Select(conds ...field.Expr) IAnswerRecordsDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a answerRecordsDo) Where(conds ...gen.Condition) IAnswerRecordsDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a answerRecordsDo) Order(conds ...field.Expr) IAnswerRecordsDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a answerRecordsDo) Distinct(cols ...field.Expr) IAnswerRecordsDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a answerRecordsDo) Omit(cols ...field.Expr) IAnswerRecordsDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a answerRecordsDo) Join(table schema.Tabler, on ...field.Expr) IAnswerRecordsDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a answerRecordsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAnswerRecordsDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a answerRecordsDo) RightJoin(table schema.Tabler, on ...field.Expr) IAnswerRecordsDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a answerRecordsDo) Group(cols ...field.Expr) IAnswerRecordsDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a answerRecordsDo) Having(conds ...gen.Condition) IAnswerRecordsDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a answerRecordsDo) Limit(limit int) IAnswerRecordsDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a answerRecordsDo) Offset(offset int) IAnswerRecordsDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a answerRecordsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAnswerRecordsDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a answerRecordsDo) Unscoped() IAnswerRecordsDo {
	return a.withDO(a.DO.Unscoped())
}

func (a answerRecordsDo) Create(values ...*model.AnswerRecords) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a answerRecordsDo) CreateInBatches(values []*model.AnswerRecords, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a answerRecordsDo) Save(values ...*model.AnswerRecords) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a answerRecordsDo) First() (*model.AnswerRecords, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnswerRecords), nil
	}
}

func (a answerRecordsDo) Take() (*model.AnswerRecords, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnswerRecords), nil
	}
}

func (a answerRecordsDo) Last() (*model.AnswerRecords, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnswerRecords), nil
	}
}

func (a answerRecordsDo) Find() ([]*model.AnswerRecords, error) {
	result, err := a.DO.Find()
	return result.([]*model.AnswerRecords), err
}

func (a answerRecordsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AnswerRecords, err error) {
	buf := make([]*model.AnswerRecords, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a answerRecordsDo) FindInBatches(result *[]*model.AnswerRecords, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a answerRecordsDo) Attrs(attrs ...field.AssignExpr) IAnswerRecordsDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a answerRecordsDo) Assign(attrs ...field.AssignExpr) IAnswerRecordsDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a answerRecordsDo) Joins(fields ...field.RelationField) IAnswerRecordsDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a answerRecordsDo) Preload(fields ...field.RelationField) IAnswerRecordsDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a answerRecordsDo) FirstOrInit() (*model.AnswerRecords, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnswerRecords), nil
	}
}

func (a answerRecordsDo) FirstOrCreate() (*model.AnswerRecords, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnswerRecords), nil
	}
}

func (a answerRecordsDo) FindByPage(offset int, limit int) (result []*model.AnswerRecords, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a answerRecordsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a answerRecordsDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a answerRecordsDo) Delete(models ...*model.AnswerRecords) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *answerRecordsDo) withDO(do gen.Dao) *answerRecordsDo {
	a.DO = *do.(*gen.DO)
	return a
}
