// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"im-chat/dao/model"
)

func newUserGroups(db *gorm.DB, opts ...gen.DOOption) userGroups {
	_userGroups := userGroups{}

	_userGroups.userGroupsDo.UseDB(db, opts...)
	_userGroups.userGroupsDo.UseModel(&model.UserGroups{})

	tableName := _userGroups.userGroupsDo.TableName()
	_userGroups.ALL = field.NewAsterisk(tableName)
	_userGroups.ID = field.NewInt32(tableName, "id")
	_userGroups.Name = field.NewString(tableName, "name")
	_userGroups.OwnerID = field.NewInt32(tableName, "owner_id")
	_userGroups.Icon = field.NewString(tableName, "icon")
	_userGroups.Type = field.NewInt32(tableName, "type")
	_userGroups.Description = field.NewString(tableName, "description")
	_userGroups.CreatedAt = field.NewTime(tableName, "created_at")
	_userGroups.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userGroups.DeletedAt = field.NewField(tableName, "deleted_at")

	_userGroups.fillFieldMap()

	return _userGroups
}

type userGroups struct {
	userGroupsDo

	ALL         field.Asterisk
	ID          field.Int32
	Name        field.String
	OwnerID     field.Int32
	Icon        field.String
	Type        field.Int32
	Description field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field

	fieldMap map[string]field.Expr
}

func (u userGroups) Table(newTableName string) *userGroups {
	u.userGroupsDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userGroups) As(alias string) *userGroups {
	u.userGroupsDo.DO = *(u.userGroupsDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userGroups) updateTableName(table string) *userGroups {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.Name = field.NewString(table, "name")
	u.OwnerID = field.NewInt32(table, "owner_id")
	u.Icon = field.NewString(table, "icon")
	u.Type = field.NewInt32(table, "type")
	u.Description = field.NewString(table, "description")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *userGroups) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userGroups) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["name"] = u.Name
	u.fieldMap["owner_id"] = u.OwnerID
	u.fieldMap["icon"] = u.Icon
	u.fieldMap["type"] = u.Type
	u.fieldMap["description"] = u.Description
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u userGroups) clone(db *gorm.DB) userGroups {
	u.userGroupsDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userGroups) replaceDB(db *gorm.DB) userGroups {
	u.userGroupsDo.ReplaceDB(db)
	return u
}

type userGroupsDo struct{ gen.DO }

type IUserGroupsDo interface {
	gen.SubQuery
	Debug() IUserGroupsDo
	WithContext(ctx context.Context) IUserGroupsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserGroupsDo
	WriteDB() IUserGroupsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserGroupsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserGroupsDo
	Not(conds ...gen.Condition) IUserGroupsDo
	Or(conds ...gen.Condition) IUserGroupsDo
	Select(conds ...field.Expr) IUserGroupsDo
	Where(conds ...gen.Condition) IUserGroupsDo
	Order(conds ...field.Expr) IUserGroupsDo
	Distinct(cols ...field.Expr) IUserGroupsDo
	Omit(cols ...field.Expr) IUserGroupsDo
	Join(table schema.Tabler, on ...field.Expr) IUserGroupsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserGroupsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserGroupsDo
	Group(cols ...field.Expr) IUserGroupsDo
	Having(conds ...gen.Condition) IUserGroupsDo
	Limit(limit int) IUserGroupsDo
	Offset(offset int) IUserGroupsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserGroupsDo
	Unscoped() IUserGroupsDo
	Create(values ...*model.UserGroups) error
	CreateInBatches(values []*model.UserGroups, batchSize int) error
	Save(values ...*model.UserGroups) error
	First() (*model.UserGroups, error)
	Take() (*model.UserGroups, error)
	Last() (*model.UserGroups, error)
	Find() ([]*model.UserGroups, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserGroups, err error)
	FindInBatches(result *[]*model.UserGroups, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserGroups) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserGroupsDo
	Assign(attrs ...field.AssignExpr) IUserGroupsDo
	Joins(fields ...field.RelationField) IUserGroupsDo
	Preload(fields ...field.RelationField) IUserGroupsDo
	FirstOrInit() (*model.UserGroups, error)
	FirstOrCreate() (*model.UserGroups, error)
	FindByPage(offset int, limit int) (result []*model.UserGroups, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserGroupsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userGroupsDo) Debug() IUserGroupsDo {
	return u.withDO(u.DO.Debug())
}

func (u userGroupsDo) WithContext(ctx context.Context) IUserGroupsDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userGroupsDo) ReadDB() IUserGroupsDo {
	return u.Clauses(dbresolver.Read)
}

func (u userGroupsDo) WriteDB() IUserGroupsDo {
	return u.Clauses(dbresolver.Write)
}

func (u userGroupsDo) Session(config *gorm.Session) IUserGroupsDo {
	return u.withDO(u.DO.Session(config))
}

func (u userGroupsDo) Clauses(conds ...clause.Expression) IUserGroupsDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userGroupsDo) Returning(value interface{}, columns ...string) IUserGroupsDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userGroupsDo) Not(conds ...gen.Condition) IUserGroupsDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userGroupsDo) Or(conds ...gen.Condition) IUserGroupsDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userGroupsDo) Select(conds ...field.Expr) IUserGroupsDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userGroupsDo) Where(conds ...gen.Condition) IUserGroupsDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userGroupsDo) Order(conds ...field.Expr) IUserGroupsDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userGroupsDo) Distinct(cols ...field.Expr) IUserGroupsDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userGroupsDo) Omit(cols ...field.Expr) IUserGroupsDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userGroupsDo) Join(table schema.Tabler, on ...field.Expr) IUserGroupsDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userGroupsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserGroupsDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userGroupsDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserGroupsDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userGroupsDo) Group(cols ...field.Expr) IUserGroupsDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userGroupsDo) Having(conds ...gen.Condition) IUserGroupsDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userGroupsDo) Limit(limit int) IUserGroupsDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userGroupsDo) Offset(offset int) IUserGroupsDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userGroupsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserGroupsDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userGroupsDo) Unscoped() IUserGroupsDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userGroupsDo) Create(values ...*model.UserGroups) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userGroupsDo) CreateInBatches(values []*model.UserGroups, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userGroupsDo) Save(values ...*model.UserGroups) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userGroupsDo) First() (*model.UserGroups, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGroups), nil
	}
}

func (u userGroupsDo) Take() (*model.UserGroups, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGroups), nil
	}
}

func (u userGroupsDo) Last() (*model.UserGroups, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGroups), nil
	}
}

func (u userGroupsDo) Find() ([]*model.UserGroups, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserGroups), err
}

func (u userGroupsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserGroups, err error) {
	buf := make([]*model.UserGroups, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userGroupsDo) FindInBatches(result *[]*model.UserGroups, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userGroupsDo) Attrs(attrs ...field.AssignExpr) IUserGroupsDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userGroupsDo) Assign(attrs ...field.AssignExpr) IUserGroupsDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userGroupsDo) Joins(fields ...field.RelationField) IUserGroupsDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userGroupsDo) Preload(fields ...field.RelationField) IUserGroupsDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userGroupsDo) FirstOrInit() (*model.UserGroups, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGroups), nil
	}
}

func (u userGroupsDo) FirstOrCreate() (*model.UserGroups, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGroups), nil
	}
}

func (u userGroupsDo) FindByPage(offset int, limit int) (result []*model.UserGroups, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userGroupsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userGroupsDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userGroupsDo) Delete(models ...*model.UserGroups) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userGroupsDo) withDO(do gen.Dao) *userGroupsDo {
	u.DO = *do.(*gen.DO)
	return u
}
