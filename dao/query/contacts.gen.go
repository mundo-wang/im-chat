// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"im-chat/dao/model"
)

func newContacts(db *gorm.DB, opts ...gen.DOOption) contacts {
	_contacts := contacts{}

	_contacts.contactsDo.UseDB(db, opts...)
	_contacts.contactsDo.UseModel(&model.Contacts{})

	tableName := _contacts.contactsDo.TableName()
	_contacts.ALL = field.NewAsterisk(tableName)
	_contacts.ID = field.NewInt(tableName, "id")
	_contacts.OwnerID = field.NewInt(tableName, "owner_id")
	_contacts.TargetID = field.NewInt(tableName, "target_id")
	_contacts.Type = field.NewInt(tableName, "type")
	_contacts.Description = field.NewString(tableName, "description")
	_contacts.CreatedAt = field.NewTime(tableName, "created_at")
	_contacts.UpdatedAt = field.NewTime(tableName, "updated_at")
	_contacts.DeletedAt = field.NewField(tableName, "deleted_at")

	_contacts.fillFieldMap()

	return _contacts
}

type contacts struct {
	contactsDo

	ALL         field.Asterisk
	ID          field.Int
	OwnerID     field.Int
	TargetID    field.Int // 对应的人/群ID
	Type        field.Int // 1为好友，2为群组
	Description field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field

	fieldMap map[string]field.Expr
}

func (c contacts) Table(newTableName string) *contacts {
	c.contactsDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c contacts) As(alias string) *contacts {
	c.contactsDo.DO = *(c.contactsDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *contacts) updateTableName(table string) *contacts {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt(table, "id")
	c.OwnerID = field.NewInt(table, "owner_id")
	c.TargetID = field.NewInt(table, "target_id")
	c.Type = field.NewInt(table, "type")
	c.Description = field.NewString(table, "description")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *contacts) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *contacts) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 8)
	c.fieldMap["id"] = c.ID
	c.fieldMap["owner_id"] = c.OwnerID
	c.fieldMap["target_id"] = c.TargetID
	c.fieldMap["type"] = c.Type
	c.fieldMap["description"] = c.Description
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
}

func (c contacts) clone(db *gorm.DB) contacts {
	c.contactsDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c contacts) replaceDB(db *gorm.DB) contacts {
	c.contactsDo.ReplaceDB(db)
	return c
}

type contactsDo struct{ gen.DO }

type IContactsDo interface {
	gen.SubQuery
	Debug() IContactsDo
	WithContext(ctx context.Context) IContactsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IContactsDo
	WriteDB() IContactsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IContactsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IContactsDo
	Not(conds ...gen.Condition) IContactsDo
	Or(conds ...gen.Condition) IContactsDo
	Select(conds ...field.Expr) IContactsDo
	Where(conds ...gen.Condition) IContactsDo
	Order(conds ...field.Expr) IContactsDo
	Distinct(cols ...field.Expr) IContactsDo
	Omit(cols ...field.Expr) IContactsDo
	Join(table schema.Tabler, on ...field.Expr) IContactsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IContactsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IContactsDo
	Group(cols ...field.Expr) IContactsDo
	Having(conds ...gen.Condition) IContactsDo
	Limit(limit int) IContactsDo
	Offset(offset int) IContactsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IContactsDo
	Unscoped() IContactsDo
	Create(values ...*model.Contacts) error
	CreateInBatches(values []*model.Contacts, batchSize int) error
	Save(values ...*model.Contacts) error
	First() (*model.Contacts, error)
	Take() (*model.Contacts, error)
	Last() (*model.Contacts, error)
	Find() ([]*model.Contacts, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Contacts, err error)
	FindInBatches(result *[]*model.Contacts, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Contacts) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IContactsDo
	Assign(attrs ...field.AssignExpr) IContactsDo
	Joins(fields ...field.RelationField) IContactsDo
	Preload(fields ...field.RelationField) IContactsDo
	FirstOrInit() (*model.Contacts, error)
	FirstOrCreate() (*model.Contacts, error)
	FindByPage(offset int, limit int) (result []*model.Contacts, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IContactsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c contactsDo) Debug() IContactsDo {
	return c.withDO(c.DO.Debug())
}

func (c contactsDo) WithContext(ctx context.Context) IContactsDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c contactsDo) ReadDB() IContactsDo {
	return c.Clauses(dbresolver.Read)
}

func (c contactsDo) WriteDB() IContactsDo {
	return c.Clauses(dbresolver.Write)
}

func (c contactsDo) Session(config *gorm.Session) IContactsDo {
	return c.withDO(c.DO.Session(config))
}

func (c contactsDo) Clauses(conds ...clause.Expression) IContactsDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c contactsDo) Returning(value interface{}, columns ...string) IContactsDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c contactsDo) Not(conds ...gen.Condition) IContactsDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c contactsDo) Or(conds ...gen.Condition) IContactsDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c contactsDo) Select(conds ...field.Expr) IContactsDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c contactsDo) Where(conds ...gen.Condition) IContactsDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c contactsDo) Order(conds ...field.Expr) IContactsDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c contactsDo) Distinct(cols ...field.Expr) IContactsDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c contactsDo) Omit(cols ...field.Expr) IContactsDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c contactsDo) Join(table schema.Tabler, on ...field.Expr) IContactsDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c contactsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IContactsDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c contactsDo) RightJoin(table schema.Tabler, on ...field.Expr) IContactsDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c contactsDo) Group(cols ...field.Expr) IContactsDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c contactsDo) Having(conds ...gen.Condition) IContactsDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c contactsDo) Limit(limit int) IContactsDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c contactsDo) Offset(offset int) IContactsDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c contactsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IContactsDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c contactsDo) Unscoped() IContactsDo {
	return c.withDO(c.DO.Unscoped())
}

func (c contactsDo) Create(values ...*model.Contacts) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c contactsDo) CreateInBatches(values []*model.Contacts, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c contactsDo) Save(values ...*model.Contacts) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c contactsDo) First() (*model.Contacts, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Contacts), nil
	}
}

func (c contactsDo) Take() (*model.Contacts, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Contacts), nil
	}
}

func (c contactsDo) Last() (*model.Contacts, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Contacts), nil
	}
}

func (c contactsDo) Find() ([]*model.Contacts, error) {
	result, err := c.DO.Find()
	return result.([]*model.Contacts), err
}

func (c contactsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Contacts, err error) {
	buf := make([]*model.Contacts, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c contactsDo) FindInBatches(result *[]*model.Contacts, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c contactsDo) Attrs(attrs ...field.AssignExpr) IContactsDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c contactsDo) Assign(attrs ...field.AssignExpr) IContactsDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c contactsDo) Joins(fields ...field.RelationField) IContactsDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c contactsDo) Preload(fields ...field.RelationField) IContactsDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c contactsDo) FirstOrInit() (*model.Contacts, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Contacts), nil
	}
}

func (c contactsDo) FirstOrCreate() (*model.Contacts, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Contacts), nil
	}
}

func (c contactsDo) FindByPage(offset int, limit int) (result []*model.Contacts, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c contactsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c contactsDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c contactsDo) Delete(models ...*model.Contacts) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *contactsDo) withDO(do gen.Dao) *contactsDo {
	c.DO = *do.(*gen.DO)
	return c
}
