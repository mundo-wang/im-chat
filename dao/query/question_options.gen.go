// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"im-chat/dao/model"
)

func newQuestionOptions(db *gorm.DB, opts ...gen.DOOption) questionOptions {
	_questionOptions := questionOptions{}

	_questionOptions.questionOptionsDo.UseDB(db, opts...)
	_questionOptions.questionOptionsDo.UseModel(&model.QuestionOptions{})

	tableName := _questionOptions.questionOptionsDo.TableName()
	_questionOptions.ALL = field.NewAsterisk(tableName)
	_questionOptions.ID = field.NewInt(tableName, "id")
	_questionOptions.QuestionID = field.NewInt(tableName, "question_id")
	_questionOptions.OptionKey = field.NewString(tableName, "option_key")
	_questionOptions.OptionText = field.NewString(tableName, "option_text")

	_questionOptions.fillFieldMap()

	return _questionOptions
}

type questionOptions struct {
	questionOptionsDo

	ALL        field.Asterisk
	ID         field.Int    // 主键ID
	QuestionID field.Int    // 题目ID
	OptionKey  field.String // 选项标识（如A、B、C、D）
	OptionText field.String // 选项内容

	fieldMap map[string]field.Expr
}

func (q questionOptions) Table(newTableName string) *questionOptions {
	q.questionOptionsDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q questionOptions) As(alias string) *questionOptions {
	q.questionOptionsDo.DO = *(q.questionOptionsDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *questionOptions) updateTableName(table string) *questionOptions {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt(table, "id")
	q.QuestionID = field.NewInt(table, "question_id")
	q.OptionKey = field.NewString(table, "option_key")
	q.OptionText = field.NewString(table, "option_text")

	q.fillFieldMap()

	return q
}

func (q *questionOptions) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *questionOptions) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 4)
	q.fieldMap["id"] = q.ID
	q.fieldMap["question_id"] = q.QuestionID
	q.fieldMap["option_key"] = q.OptionKey
	q.fieldMap["option_text"] = q.OptionText
}

func (q questionOptions) clone(db *gorm.DB) questionOptions {
	q.questionOptionsDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q questionOptions) replaceDB(db *gorm.DB) questionOptions {
	q.questionOptionsDo.ReplaceDB(db)
	return q
}

type questionOptionsDo struct{ gen.DO }

type IQuestionOptionsDo interface {
	gen.SubQuery
	Debug() IQuestionOptionsDo
	WithContext(ctx context.Context) IQuestionOptionsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQuestionOptionsDo
	WriteDB() IQuestionOptionsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQuestionOptionsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQuestionOptionsDo
	Not(conds ...gen.Condition) IQuestionOptionsDo
	Or(conds ...gen.Condition) IQuestionOptionsDo
	Select(conds ...field.Expr) IQuestionOptionsDo
	Where(conds ...gen.Condition) IQuestionOptionsDo
	Order(conds ...field.Expr) IQuestionOptionsDo
	Distinct(cols ...field.Expr) IQuestionOptionsDo
	Omit(cols ...field.Expr) IQuestionOptionsDo
	Join(table schema.Tabler, on ...field.Expr) IQuestionOptionsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQuestionOptionsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQuestionOptionsDo
	Group(cols ...field.Expr) IQuestionOptionsDo
	Having(conds ...gen.Condition) IQuestionOptionsDo
	Limit(limit int) IQuestionOptionsDo
	Offset(offset int) IQuestionOptionsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQuestionOptionsDo
	Unscoped() IQuestionOptionsDo
	Create(values ...*model.QuestionOptions) error
	CreateInBatches(values []*model.QuestionOptions, batchSize int) error
	Save(values ...*model.QuestionOptions) error
	First() (*model.QuestionOptions, error)
	Take() (*model.QuestionOptions, error)
	Last() (*model.QuestionOptions, error)
	Find() ([]*model.QuestionOptions, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QuestionOptions, err error)
	FindInBatches(result *[]*model.QuestionOptions, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QuestionOptions) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQuestionOptionsDo
	Assign(attrs ...field.AssignExpr) IQuestionOptionsDo
	Joins(fields ...field.RelationField) IQuestionOptionsDo
	Preload(fields ...field.RelationField) IQuestionOptionsDo
	FirstOrInit() (*model.QuestionOptions, error)
	FirstOrCreate() (*model.QuestionOptions, error)
	FindByPage(offset int, limit int) (result []*model.QuestionOptions, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQuestionOptionsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q questionOptionsDo) Debug() IQuestionOptionsDo {
	return q.withDO(q.DO.Debug())
}

func (q questionOptionsDo) WithContext(ctx context.Context) IQuestionOptionsDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q questionOptionsDo) ReadDB() IQuestionOptionsDo {
	return q.Clauses(dbresolver.Read)
}

func (q questionOptionsDo) WriteDB() IQuestionOptionsDo {
	return q.Clauses(dbresolver.Write)
}

func (q questionOptionsDo) Session(config *gorm.Session) IQuestionOptionsDo {
	return q.withDO(q.DO.Session(config))
}

func (q questionOptionsDo) Clauses(conds ...clause.Expression) IQuestionOptionsDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q questionOptionsDo) Returning(value interface{}, columns ...string) IQuestionOptionsDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q questionOptionsDo) Not(conds ...gen.Condition) IQuestionOptionsDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q questionOptionsDo) Or(conds ...gen.Condition) IQuestionOptionsDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q questionOptionsDo) Select(conds ...field.Expr) IQuestionOptionsDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q questionOptionsDo) Where(conds ...gen.Condition) IQuestionOptionsDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q questionOptionsDo) Order(conds ...field.Expr) IQuestionOptionsDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q questionOptionsDo) Distinct(cols ...field.Expr) IQuestionOptionsDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q questionOptionsDo) Omit(cols ...field.Expr) IQuestionOptionsDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q questionOptionsDo) Join(table schema.Tabler, on ...field.Expr) IQuestionOptionsDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q questionOptionsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQuestionOptionsDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q questionOptionsDo) RightJoin(table schema.Tabler, on ...field.Expr) IQuestionOptionsDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q questionOptionsDo) Group(cols ...field.Expr) IQuestionOptionsDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q questionOptionsDo) Having(conds ...gen.Condition) IQuestionOptionsDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q questionOptionsDo) Limit(limit int) IQuestionOptionsDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q questionOptionsDo) Offset(offset int) IQuestionOptionsDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q questionOptionsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQuestionOptionsDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q questionOptionsDo) Unscoped() IQuestionOptionsDo {
	return q.withDO(q.DO.Unscoped())
}

func (q questionOptionsDo) Create(values ...*model.QuestionOptions) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q questionOptionsDo) CreateInBatches(values []*model.QuestionOptions, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q questionOptionsDo) Save(values ...*model.QuestionOptions) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q questionOptionsDo) First() (*model.QuestionOptions, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionOptions), nil
	}
}

func (q questionOptionsDo) Take() (*model.QuestionOptions, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionOptions), nil
	}
}

func (q questionOptionsDo) Last() (*model.QuestionOptions, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionOptions), nil
	}
}

func (q questionOptionsDo) Find() ([]*model.QuestionOptions, error) {
	result, err := q.DO.Find()
	return result.([]*model.QuestionOptions), err
}

func (q questionOptionsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QuestionOptions, err error) {
	buf := make([]*model.QuestionOptions, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q questionOptionsDo) FindInBatches(result *[]*model.QuestionOptions, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q questionOptionsDo) Attrs(attrs ...field.AssignExpr) IQuestionOptionsDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q questionOptionsDo) Assign(attrs ...field.AssignExpr) IQuestionOptionsDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q questionOptionsDo) Joins(fields ...field.RelationField) IQuestionOptionsDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q questionOptionsDo) Preload(fields ...field.RelationField) IQuestionOptionsDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q questionOptionsDo) FirstOrInit() (*model.QuestionOptions, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionOptions), nil
	}
}

func (q questionOptionsDo) FirstOrCreate() (*model.QuestionOptions, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionOptions), nil
	}
}

func (q questionOptionsDo) FindByPage(offset int, limit int) (result []*model.QuestionOptions, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q questionOptionsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q questionOptionsDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q questionOptionsDo) Delete(models ...*model.QuestionOptions) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *questionOptionsDo) withDO(do gen.Dao) *questionOptionsDo {
	q.DO = *do.(*gen.DO)
	return q
}
