// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"im-chat/dao/model"
)

func newQuestionSession(db *gorm.DB, opts ...gen.DOOption) questionSession {
	_questionSession := questionSession{}

	_questionSession.questionSessionDo.UseDB(db, opts...)
	_questionSession.questionSessionDo.UseModel(&model.QuestionSession{})

	tableName := _questionSession.questionSessionDo.TableName()
	_questionSession.ALL = field.NewAsterisk(tableName)
	_questionSession.ID = field.NewInt(tableName, "id")
	_questionSession.SessionID = field.NewString(tableName, "session_id")
	_questionSession.UserID = field.NewInt64(tableName, "user_id")
	_questionSession.Username = field.NewString(tableName, "username")
	_questionSession.AgentCode = field.NewString(tableName, "agent_code")
	_questionSession.PositionID = field.NewInt64(tableName, "position_id")
	_questionSession.Status = field.NewInt(tableName, "status")
	_questionSession.CreatedBy = field.NewString(tableName, "created_by")
	_questionSession.CreatedAt = field.NewTime(tableName, "created_at")

	_questionSession.fillFieldMap()

	return _questionSession
}

type questionSession struct {
	questionSessionDo

	ALL        field.Asterisk
	ID         field.Int    // 主键ID
	SessionID  field.String // Session唯一标识
	UserID     field.Int64  // 用户ID
	Username   field.String // 用户名
	AgentCode  field.String // 智能体编码
	PositionID field.Int64  // 岗位id
	Status     field.Int    // 生成题目状态（1=生成中，2=已生成，3=生成失败，4=已提交）
	CreatedBy  field.String // 创建人
	CreatedAt  field.Time   // 创建时间

	fieldMap map[string]field.Expr
}

func (q questionSession) Table(newTableName string) *questionSession {
	q.questionSessionDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q questionSession) As(alias string) *questionSession {
	q.questionSessionDo.DO = *(q.questionSessionDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *questionSession) updateTableName(table string) *questionSession {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt(table, "id")
	q.SessionID = field.NewString(table, "session_id")
	q.UserID = field.NewInt64(table, "user_id")
	q.Username = field.NewString(table, "username")
	q.AgentCode = field.NewString(table, "agent_code")
	q.PositionID = field.NewInt64(table, "position_id")
	q.Status = field.NewInt(table, "status")
	q.CreatedBy = field.NewString(table, "created_by")
	q.CreatedAt = field.NewTime(table, "created_at")

	q.fillFieldMap()

	return q
}

func (q *questionSession) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *questionSession) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 9)
	q.fieldMap["id"] = q.ID
	q.fieldMap["session_id"] = q.SessionID
	q.fieldMap["user_id"] = q.UserID
	q.fieldMap["username"] = q.Username
	q.fieldMap["agent_code"] = q.AgentCode
	q.fieldMap["position_id"] = q.PositionID
	q.fieldMap["status"] = q.Status
	q.fieldMap["created_by"] = q.CreatedBy
	q.fieldMap["created_at"] = q.CreatedAt
}

func (q questionSession) clone(db *gorm.DB) questionSession {
	q.questionSessionDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q questionSession) replaceDB(db *gorm.DB) questionSession {
	q.questionSessionDo.ReplaceDB(db)
	return q
}

type questionSessionDo struct{ gen.DO }

type IQuestionSessionDo interface {
	gen.SubQuery
	Debug() IQuestionSessionDo
	WithContext(ctx context.Context) IQuestionSessionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQuestionSessionDo
	WriteDB() IQuestionSessionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQuestionSessionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQuestionSessionDo
	Not(conds ...gen.Condition) IQuestionSessionDo
	Or(conds ...gen.Condition) IQuestionSessionDo
	Select(conds ...field.Expr) IQuestionSessionDo
	Where(conds ...gen.Condition) IQuestionSessionDo
	Order(conds ...field.Expr) IQuestionSessionDo
	Distinct(cols ...field.Expr) IQuestionSessionDo
	Omit(cols ...field.Expr) IQuestionSessionDo
	Join(table schema.Tabler, on ...field.Expr) IQuestionSessionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQuestionSessionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQuestionSessionDo
	Group(cols ...field.Expr) IQuestionSessionDo
	Having(conds ...gen.Condition) IQuestionSessionDo
	Limit(limit int) IQuestionSessionDo
	Offset(offset int) IQuestionSessionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQuestionSessionDo
	Unscoped() IQuestionSessionDo
	Create(values ...*model.QuestionSession) error
	CreateInBatches(values []*model.QuestionSession, batchSize int) error
	Save(values ...*model.QuestionSession) error
	First() (*model.QuestionSession, error)
	Take() (*model.QuestionSession, error)
	Last() (*model.QuestionSession, error)
	Find() ([]*model.QuestionSession, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QuestionSession, err error)
	FindInBatches(result *[]*model.QuestionSession, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QuestionSession) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQuestionSessionDo
	Assign(attrs ...field.AssignExpr) IQuestionSessionDo
	Joins(fields ...field.RelationField) IQuestionSessionDo
	Preload(fields ...field.RelationField) IQuestionSessionDo
	FirstOrInit() (*model.QuestionSession, error)
	FirstOrCreate() (*model.QuestionSession, error)
	FindByPage(offset int, limit int) (result []*model.QuestionSession, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQuestionSessionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q questionSessionDo) Debug() IQuestionSessionDo {
	return q.withDO(q.DO.Debug())
}

func (q questionSessionDo) WithContext(ctx context.Context) IQuestionSessionDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q questionSessionDo) ReadDB() IQuestionSessionDo {
	return q.Clauses(dbresolver.Read)
}

func (q questionSessionDo) WriteDB() IQuestionSessionDo {
	return q.Clauses(dbresolver.Write)
}

func (q questionSessionDo) Session(config *gorm.Session) IQuestionSessionDo {
	return q.withDO(q.DO.Session(config))
}

func (q questionSessionDo) Clauses(conds ...clause.Expression) IQuestionSessionDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q questionSessionDo) Returning(value interface{}, columns ...string) IQuestionSessionDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q questionSessionDo) Not(conds ...gen.Condition) IQuestionSessionDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q questionSessionDo) Or(conds ...gen.Condition) IQuestionSessionDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q questionSessionDo) Select(conds ...field.Expr) IQuestionSessionDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q questionSessionDo) Where(conds ...gen.Condition) IQuestionSessionDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q questionSessionDo) Order(conds ...field.Expr) IQuestionSessionDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q questionSessionDo) Distinct(cols ...field.Expr) IQuestionSessionDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q questionSessionDo) Omit(cols ...field.Expr) IQuestionSessionDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q questionSessionDo) Join(table schema.Tabler, on ...field.Expr) IQuestionSessionDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q questionSessionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQuestionSessionDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q questionSessionDo) RightJoin(table schema.Tabler, on ...field.Expr) IQuestionSessionDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q questionSessionDo) Group(cols ...field.Expr) IQuestionSessionDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q questionSessionDo) Having(conds ...gen.Condition) IQuestionSessionDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q questionSessionDo) Limit(limit int) IQuestionSessionDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q questionSessionDo) Offset(offset int) IQuestionSessionDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q questionSessionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQuestionSessionDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q questionSessionDo) Unscoped() IQuestionSessionDo {
	return q.withDO(q.DO.Unscoped())
}

func (q questionSessionDo) Create(values ...*model.QuestionSession) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q questionSessionDo) CreateInBatches(values []*model.QuestionSession, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q questionSessionDo) Save(values ...*model.QuestionSession) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q questionSessionDo) First() (*model.QuestionSession, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionSession), nil
	}
}

func (q questionSessionDo) Take() (*model.QuestionSession, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionSession), nil
	}
}

func (q questionSessionDo) Last() (*model.QuestionSession, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionSession), nil
	}
}

func (q questionSessionDo) Find() ([]*model.QuestionSession, error) {
	result, err := q.DO.Find()
	return result.([]*model.QuestionSession), err
}

func (q questionSessionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QuestionSession, err error) {
	buf := make([]*model.QuestionSession, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q questionSessionDo) FindInBatches(result *[]*model.QuestionSession, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q questionSessionDo) Attrs(attrs ...field.AssignExpr) IQuestionSessionDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q questionSessionDo) Assign(attrs ...field.AssignExpr) IQuestionSessionDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q questionSessionDo) Joins(fields ...field.RelationField) IQuestionSessionDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q questionSessionDo) Preload(fields ...field.RelationField) IQuestionSessionDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q questionSessionDo) FirstOrInit() (*model.QuestionSession, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionSession), nil
	}
}

func (q questionSessionDo) FirstOrCreate() (*model.QuestionSession, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionSession), nil
	}
}

func (q questionSessionDo) FindByPage(offset int, limit int) (result []*model.QuestionSession, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q questionSessionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q questionSessionDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q questionSessionDo) Delete(models ...*model.QuestionSession) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *questionSessionDo) withDO(do gen.Dao) *questionSessionDo {
	q.DO = *do.(*gen.DO)
	return q
}
